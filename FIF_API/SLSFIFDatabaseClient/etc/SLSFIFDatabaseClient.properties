###############################################################################
#
# Configuration file for the SLS-FIF DatabaseClient application
#
# @author schwarje
#
###############################################################################

# number of request receivers (threads waiting for requests from the front end)
SynchronousFifClient.NumberOfRequestReceivers=1
# number of regular request handlers (threads processing FifTransactions in the back end)
SynchronousFifClient.NumberOfRequestHandlers=8
# number of recycling request handlers (threads processing FifTransactions in recycling)
SynchronousFifClient.NumberOfRecycleHandlers=2
# client type (all instances of a certain type (eg KBA-FIF) share the clientType)
SynchronousFifClient.ClientType=SLS
# client ID (unique identifier (for each instance) of a client of a certain type)
SynchronousFifClient.ClientId=SLS1
# database alias for processing FifTransactions
SynchronousFifClient.FifTransaction.DBAlias=requestdb


# indicates, if notifications are created (CCM-FIF handleFailedFifRequest) after a request failed in the back end
SynchronousFifClient.FailedRequestNotification=false
# list of action names (comma seperated), for which notifications are created
SynchronousFifClient.FailedRequestNotification.ActionNames=modifyContract
# database alias for notifications for failed requests
SynchronousFifClient.FailedRequestNotification.DBAlias=requestdb


# indicates, if all FifTransactions are deleted from the database after processing
SynchronousFifClient.DeleteAfterCompletion=false
# list of action names (comma seperated), for which FifTransactions are deleted from the database after processing
# (only used, if SynchronousFifClient.DeleteAfterCompletion is set to 'false')
SynchronousFifClient.DeleteAfterCompletion.ActionNames=createExternalOrder,closeExternalOrder
# indicates, if FifTransactions, for which no customer number could be found, are deleted
# (only used, if SynchronousFifClient.DeleteAfterCompletion is set to 'false')
SynchronousFifClient.DeleteUnidentifiedRequestsAfterCompletion=false


# indicates, if certain actions are blocked (and postponed) by this client
SynchronousFifClient.BlockActionNames=true
# list of blocked action names (comma seperated)
SynchronousFifClient.BlockActionNames.ActionNames=modifyContract
# postponement delay (in minutes) for blocked actions
SynchronousFifClient.BlockActionNames.Delay=360


# indicates, if failed responses (transactions completed in the backend, but errors while sending the 
# responses back to the front end) are taken care of
SynchronousFifClient.FailedResponseHandling=true
# maxmimum number of retries for resending responses
SynchronousFifClient.FailedResponseHandling.MaxRetries=5
# batch size for retrieving failed responses
SynchronousFifClient.FailedResponseHandling.BatchSize=100
# waiting time (in minutes) between two batches
SynchronousFifClient.FailedResponseHandling.SleepTime=60
# delay time (in minutes) after which a retry is done
SynchronousFifClient.FailedResponseHandling.ResendDelay=720

# indicates, if hanging requests (requests which still seem to be in progress in FIF after a certain time) 
# are reset on startup of the FIF client
SynchronousFifClient.HangingRequestHandling=true
# batch size for retrieving hanging requests
SynchronousFifClient.HangingRequestHandling.BatchSize=100
# minimum age (in minutes) for hanging requests to be reset
SynchronousFifClient.HangingRequestHandling.RequestAge=60


# Indicates whether messages sent to FIF should be written to an output file (true/false)
SynchronousFifClient.WriteSentMessages=true
# The directory to store messages sent to FIF in (only used if WriteSentMessages is set to true)
SynchronousFifClient.SentOutputDir=SLSFIFDatabaseClient/fif-request

# Indicates whether the reply messages from FIF should be written to an output file (true/false)
SynchronousFifClient.WriteReplyMessages=true
# The directory to store the reply messages from FIF in (only used if WriteReplyMessages is set to true)
SynchronousFifClient.ReplyOutputDir=SLSFIFDatabaseClient/fif-reply
# The directory to store the invalid reply messages from FIF in.
# A reply is invalid if it cannot be interpreted by the message receiver.
# This usually means that FIF is sending incorrect data as a reply.
SynchronousFifClient.InvalidReplyOutputDir=SLSFIFDatabaseClient/fif-invalid-reply


#########################################
# Settings specific to database clients #
#########################################

# database alias for retrieving requests from the front end
SynchronousDatabaseClient.DatabaseAlias=requestdb
# waiting time (in minutes) after retrieving a batch of requests without success
SynchronousDatabaseClient.RequestSleepTime=1
# number of requests retrieved with each batch
SynchronousDatabaseClient.BatchSize=50
# indicates, if this client supports dependent transactions
SynchronousDatabaseClient.EnableDependentTransactions=false
# indicates, if this client supports transaction lists, ie more than one request within one transaction
SynchronousDatabaseClient.EnableTransactionLists=true
# indicates, if this client supports transaction results, ie if results are written back to the front end DB
SynchronousDatabaseClient.EnableTransactionResults=true
# indicates, if this client supports FIF parameter lists
SynchronousDatabaseClient.EnableParameterLists=true

# indicates, if all single requests are wrapped in a transaction list
SynchronousDatabaseClient.WrapRequestInTransactionList=false
# the name of the transaction list for wrapped requests
SynchronousDatabaseClient.ArtificialListName=artificial-list
# indicates, if the OMTS orderID is populated on the wrapped request
SynchronousDatabaseClient.PopulateOmtsOrderId=true
# default parameter name of OMTSOrderID for wrapped requests
SynchronousDatabaseClient.DefaultOmtsOrderIdParameterName=OMTS_ORDER_ID

# maximum length of error messages in the front end database
SynchronousDatabaseClient.MaxErrorLength=4000
# data type of the status field (VARCHAR / NUMBER)
SynchronousDatabaseClient.RequestStatusDataType=VARCHAR
# strings for the FIF states in the database table
SynchronousDatabaseClient.RequestStatusNotStarted=NOT_STARTED
SynchronousDatabaseClient.RequestStatusInProgress=IN_PROGRESS
SynchronousDatabaseClient.RequestStatusCompleted=COMPLETED
SynchronousDatabaseClient.RequestStatusFailed=FAILED
SynchronousDatabaseClient.RequestStatusNotExecuted=NOT_EXECUTED
SynchronousDatabaseClient.RequestStatusCanceled=CANCELED

###########################
# Backend Server Settings #
###########################

# path and name of the CcmFifInterface process
ServerHandler.ServerProcessName=/pkginf01/home/schwarje/dev/bin/CcmFifInterface_dev_schwarje
# instance base of the server. Servers are run with instance names ServerInstanceBase and a trailing number, eg SLS_1
ServerHandler.ServerInstanceBase=SLS_
# arguments to be passed to the server on startup
ServerHandler.ServerArguments=

# indicates, if the backend server is simulated (only used for test purposes)
ServerHandler.SimulateServer=false
# indicates, if a server crash is simulated (empty reply)
ServerHandler.SimulateServerCrash=false
# name of the file name with the simulated reply
ServerHandler.SimulatedReplyFileName=xml/test.xml

###########################
# RequestHandler Settings #
###########################

# batch size for retrieving FifTransactions
RequestHandler.BatchSize=100
# waiting time (in minutes) after retrieving FifTransactions without success
RequestHandler.SelectInterval=60

######################
# Recycling Settings #
######################

# indicates, if recycling is enabled
RequestHandler.EnableRecycling=true
# maximum number of recycling stages, after which response is sent without recycling
RequestHandler.MaxRecycleStage=4
# delays (in minutes) for each stage, indicating after how much time the request is rerun
RequestHandler.RecycleDelay.Stage1=1
RequestHandler.RecycleDelay.Stage2=10
RequestHandler.RecycleDelay.Stage3=100
RequestHandler.RecycleDelay.Stage4=1440
# db alias for retrieving recycled errors
RequestHandler.RecycledErrorsDBAlias=requestdb
# database statement for retrieving recycled errors
RequestHandler.RetrieveRecycledErrorStmt=select value from general_code_item where group_code = 'ERR_REF'

#############################
# MESSAGE CREATION SETTINGS #
#############################

#--- GENERAL MESSAGECREATOR SETTINGS --#

# Indicates whether the produced XML messages should also be written
# as a file in the output directory
messagecreator.WriteOutputFiles=false
# The directory to store the output XML files in
messagecreator.OutputDir=SLSFIFDatabaseClient/output

# Indicates whether the XML representation of a request should be
# written as a file.
messagecreator.XSLT.WriteIntermediateFiles=false
# The directory where the intermediate XML files should be written
messagecreator.XSLT.IntermediateDir=SLSFIFDatabaseClient/intermediate

# The directory where the metadata file is stored
messagecreator.MetaDataDir=SLSFIFDatabaseClient/etc/
# The name of the XML metadata file
messagecreator.MetaDataFile=sls-fif-databaseclient-metadata.xml

# Indicates whether the use of reference data should be supported by the client.
messagecreator.EnableReferenceDataSupport=true
# The name of the database alias to use for retrieving reference data
messagecreator.ReferenceDataDBAlias=requestdb

#--- XSQL SETTINGS ---#
# The directory where the XSQL files are located
messagecreator.XSQL.Directory=SLSFIFDatabaseClient/xsqls

#--- XSLT SETTINGS ---#
# The directory where the XSQL files are located
messagecreator.XSLT.Directory=SLSFIFDatabaseClient/xslt


###################
# LOGGER SETTINGS #
###################

#
# The FIF Message Creator uses the Apache log4j framework for logging.
# The following entries configure log4j.
# Please refer to http://jakarta.apache.org/log4j/docs/index.html for
# detailed instructions.
#
# The log file name is specified in the log4j.appender.File.File key.
#

# Definition of the logging level and the appenders
log4j.rootLogger=DEBUG, File

# Console Appender configuration
log4j.appender.Console=org.apache.log4j.ConsoleAppender
log4j.appender.Console.layout=org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern=%d | %-5p | [%t] | %m%n

# File Appender configuration
log4j.appender.File=net.arcor.fif.common.DatedRollingFileAppender
log4j.appender.File.File=../LOG/SLSFIFDatabaseClient.log
log4j.appender.File.Append=true
log4j.appender.File.MaxFileSize=1MB
log4j.appender.File.DateFormat=.yyyy.MM.dd.HH.mm.ss
log4j.appender.File.layout=org.apache.log4j.PatternLayout
log4j.appender.File.layout.ConversionPattern=%d | %-5p | [%t] | %m%n


#####################
# DATABASE SETTINGS #
#####################

# The list of database aliases that are being used by the application
# An alias maps to a specific set of database configuration settings
# The DatabaseClient only needs one database alias and this alias should
# be called requestdb
db.aliases=requestdb
# The name of the database driver to use
db.requestdb.Driver=oracle.jdbc.driver.OracleDriver
# The connection string to use to connect to the database
db.requestdb.ConnectString=jdbc:oracle:thin:@pkgifddb:1610:d1ccb
# The user name to use to connect to the database
db.requestdb.User=ccm_user
# The password to use to connect to the database (encrypted in CCB format)
db.requestdb.Password=ernirnlihlrieppg
# The encryption key that was used to encrypt the password
db.requestdb.EncryptionKey=pshsodoehseffjlhsohedqfpnpfssmpleggfqpprnlhjhess
# The maximum number of minutes that a connection can remain active (in minutes)
db.requestdb.MaximumConnectionLifeTime=240
# The minimum number of open connections in the pool
db.requestdb.MinimumConnectionCount=0
# The maximum number of open connections in the pool
db.requestdb.MaximumConnectionCount=30
# The number of minutes to wait between connection cleanup runs
db.requestdb.HouseKeepingSleepTime=1

#### Database statements for retrieving FifRequests from the front end ####

# statement for retrieving a FifRequest from the front end by transactionID
SynchronousDatabaseClient.FifRequest.FetchFifRequestById=\
SELECT TRANSACTION_ID, STATUS, TRANSACTION_LIST_STATUS, \
DUE_DATE, START_DATE, END_DATE, ACTION_NAME FROM FIF_REQUEST \
WHERE TARGET_CLIENT = 'SLS' AND TRANSACTION_ID = ?

# statement for retrieving a FifRequestList from the front end by transactionListID
SynchronousDatabaseClient.FifRequest.FetchFifRequestListById=\
SELECT TRANSACTION_ID FROM FIF_REQUEST \
WHERE TARGET_CLIENT = 'SLS' AND TRANSACTION_LIST_ID = ?

# statement for retrieving the parameters for a FifRequest
SynchronousDatabaseClient.FifRequest.FetchFifRequestParam=\
SELECT PARAM, VALUE FROM FIF_REQUEST_PARAM \
WHERE TRANSACTION_ID = ?

# statement for retrieving the parameter lists for a FifRequest
SynchronousDatabaseClient.FifRequest.FetchFifRequestParamList=\
SELECT PARAM_LIST, LIST_ITEM_NUMBER, PARAM, VALUE FROM FIF_REQUEST_PARAM_LIST \
WHERE TRANSACTION_ID = ?

# statement for retrieving a batch of pending FifRequests
SynchronousDatabaseClient.FifRequest.FetchPendingFifRequests=\
SELECT TRANSACTION_ID FROM FIF_REQUEST SLS1 \
WHERE TARGET_CLIENT = 'SLS' \
AND STATUS = 'NOT_STARTED' \
AND ( \
  TRANSACTION_LIST_ID IS NOT NULL \
  AND TRANSACTION_LIST_STATUS='NOT_STARTED' \
  AND NOT EXISTS ( \
    SELECT 1 FROM FIF_REQUEST SLS2 \
	WHERE SLS1.TRANSACTION_LIST_ID = SLS2.TRANSACTION_LIST_ID \
	AND (TRANSACTION_LIST_STATUS != 'NOT_STARTED' OR STATUS != 'NOT_STARTED')) \
  OR \
  TRANSACTION_LIST_ID IS NULL) \
AND SYSDATE >= DUE_DATE \
AND ROWNUM <= ? \
ORDER BY PRIORITY DESC, TRANSACTION_ID ASC

# statement for locking a FifRequest
SynchronousDatabaseClient.FifRequest.LockFifRequest=\
SELECT 1 FROM FIF_REQUEST WHERE TRANSACTION_ID = ? \
AND STATUS='NOT_STARTED' FOR UPDATE

# statement for updating a FifRequest
SynchronousDatabaseClient.FifRequest.UpdateFifRequest=\
UPDATE FIF_REQUEST SET \
START_DATE = ?, END_DATE = ?, STATUS = ?, \
ERROR_TEXT = ? \
WHERE TRANSACTION_ID = ?

# statement for populating the results of a FifRequest on the front end
SynchronousDatabaseClient.FifRequest.InsertFifRequestResult=\
INSERT INTO FIF_REQUEST_RESULT (TRANSACTION_ID, RETURN_PARAM, RETURN_VALUE) \
VALUES (?, ?, ?)

#### Database statements for FifTransaction logging ####

# The select statement recycle transaction by ID 
SynchronousFifClient.FifTransaction.RetrieveFifTransactionsById= \
select * from fif_transaction where transaction_id = ? and client_type = ?

# The select statement to retrieve pending transactions
SynchronousFifClient.FifTransaction.RetrievePendingFifTransactions= \
select * from fif_transaction \
where status = ? and client_id = ? \
and due_date <= sysdate \
and rownum <= ?

# The select statement to retrieve completed requests with failed responses
SynchronousFifClient.FifTransaction.RetrieveFailedResponses= \
select * from fif_transaction \
where status = ? \
and client_id = ? \
and audit_update_date_time <= ? \
and response_retry_count < ? \
and rownum <= ?

# The delete statement recycle transaction
SynchronousFifClient.FifTransaction.DeleteFifTransaction= \
delete from fif_transaction where transaction_id = ? and client_type = ?

# The update statement recycle transaction
SynchronousFifClient.FifTransaction.UpdateFifTransaction= \
update fif_transaction set \
due_date = ?, end_date = ?, status = ?, recycle_stage = ?, client_response = ?, \
customer_number = ?, audit_update_user_id = ?, audit_update_date_time = sysdate, response_retry_count = ? \
where transaction_id = ? and client_type = ?

# The insert statement recycle transaction
SynchronousFifClient.FifTransaction.InsertFifTransaction= \
insert into fif_transaction \
(transaction_id, client_type, client_id, client_request, client_response, due_date, entry_date, \
status, recycle_stage, customer_number, audit_update_user_id, response_retry_count, audit_update_date_time) \
values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, sysdate)

#### Database statements for creation of notifications for failed requests ####

# parameters for creating notifications for failed fif requests   
SynchronousFifClient.FailedRequestNotification.GetTransactionID.Statement=\
select 'FR-'||lpad(fif_transaction_id_seq.nextval, 15, '0') from dual

SynchronousFifClient.FailedRequestNotification.InsertRequest.Statement=\
insert into ccm_fif_request (transaction_id, target_client, status, action_name, \
   due_date, priority, creation_date, audit_update_user_id) \
values (?, 'CCM', 'NOT_STARTED', 'handleFailedFifRequest', sysdate, 0, sysdate, 'FIF-API')

SynchronousFifClient.FailedRequestNotification.InsertRequestParam.Statement=\
insert into ccm_fif_request_param (transaction_id, param, value) \
values (?, ?, ?)   

SynchronousFifClient.FailedRequestNotification.InsertRequestParamList.Statement=\
insert into ccm_fif_request_param_list (transaction_id, param_list, list_item_number, param, value) \
values (?, ?, ?, ?, ?)   

