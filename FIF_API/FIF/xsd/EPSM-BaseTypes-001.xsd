<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSpy v2005 sp1 U (http://www.xmlspy.com) by Reto Renner (Arcor AG & Co. KG) -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:base="http://www.arcor.net/EPSM-BaseTypes-001" targetNamespace="http://www.arcor.net/EPSM-BaseTypes-001" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:element name="_EPSM_BaseTypes_Dokument_Information">
		<xs:annotation>
			<xs:documentation>Version 1.7
			
Änderungshistorie
		1.0 2004-04-26 Klaus Geuer: Umstellung auf deutsche Dokumentation
		1.1 2006-03-13 Michael Hahn: Attribut Version beim Service und Event hinzugefügt
		1.2 2006-05-12 Michael Hahn: Der ResultCode und ExceptionErrorCode wurde von 3 auf 8 Stellen geändert
		1.3 2006-12-21 Michael Hahn: Änderung der Namensgebung von baseTypes.xsd in EPSM-BaseTypes.xsd                 
		1.4 2007-01-24 Reto Renner: Type Exception entfernt
		1.5 2007-02-03 El Mahdi El Hilali: Dokument Information Element Name auf _EPSM_BaseTypes_Dokument_Information geändert
		1.6 2007-03-08 Peter Herwig: Entfernen Service FatalException
		1.7 2007-03-27 Reto RennerZufügen von result und ändern von resultCode und resultText in errorCode und errorText
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<!-- definition of Services  -->
	<xs:complexType name="Service" abstract="true">
		<xs:annotation>
			<xs:documentation>Der abstrakte Typ 'Service' definiert Elemente und Attribute, die für alle Services gültig sind. Dieser Typ darf nur in diesem Schema referenziert werden. Im Zusammenhang mit der Choice "InputData" handelt es sich um einen Request.  Im Zusammenhang mit der Choice "OutputData" handelt es sich um eine Response eines vorhergehenden Requests.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="version" type="xs:string"/>
		<xs:attribute name="originator" type="xs:string"/>
	</xs:complexType>
	<xs:complexType name="ProviderService" abstract="true">
		<xs:annotation>
			<xs:documentation>Der abstrakte Typ 'ProviderService' definiert Elemente und Attribute, die für alle Services eines Diensterbringers gültig sind.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="base:Service"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="BusService" abstract="true">
		<xs:annotation>
			<xs:documentation>Der abstrakte Typ 'BusService' definiert Elemente und Attribute, die für alle Services des Service Bus gültig sind.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="base:Service"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="RequestorService" abstract="true">
		<xs:annotation>
			<xs:documentation>Der abstrakte Typ 'RequestorService' definiert Elemente und Attribute, die für alle Services eines Dienstnutzers gültig sind.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="base:Service"/>
		</xs:complexContent>
	</xs:complexType>
	<!-- definition of events    -->
	<xs:complexType name="Event" abstract="true">
		<xs:annotation>
			<xs:documentation>Der abstrakte Typ 'Event' definiert Elemente und Attribute, die für alle Events gültig sind. Dieser Typ darf nur in diesem Schema referenziert werden. Er wird immer im Zusammenhang mit der Choice "OutputData" verwendet..</xs:documentation>
		</xs:annotation>
		<xs:attribute name="version" type="xs:string"/>
		<xs:attribute name="originator" type="xs:string"/>
	</xs:complexType>
	<xs:complexType name="ProviderEvent" abstract="true">
		<xs:annotation>
			<xs:documentation>Der abstrakte Typ 'ProviderEvent' definiert Elemente und Attribute, die für alle Events eines Diensterbringers gültig sind. </xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="base:Event"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="BusEvent" abstract="true">
		<xs:annotation>
			<xs:documentation>Der abstrakte Typ 'BusEvent' definiert Elemente und Attribute, die für alle Events des Service Bus gültig sind.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="base:Event"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="RequestorEvent" abstract="true">
		<xs:annotation>
			<xs:documentation>Der abstrakte Typ 'RequestorEvent' definiert Elemente und Attribute, die für alle Events eines Dienstnutzers gültig sind.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="base:Event"/>
		</xs:complexContent>
	</xs:complexType>
	<!-- definition of attributes -->
	<xs:complexType name="InputData" abstract="true">
		<xs:annotation>
			<xs:documentation>In dieser Struktur werden alle Elemente und Attribute definiert, die für alle Services und alle Requests einheitlich sind.</xs:documentation>
		</xs:annotation>
	</xs:complexType>
	<xs:complexType name="OutputData" abstract="true">
		<xs:annotation>
			<xs:documentation>In dieser Struktur werden alle Elemente und Attribute definiert, die für alle Responses von Services und alle Events einheitlich sind. 
	Es ist zwingend der Ergebnisstatus und (im Fehlerfall) Fehlercode und Fehlertext anzgeben: 			result = true, wenn der Service erfolgreich beendet wude (kein Fehler)			result =false, wenn der Service nicht erfolgreich beendet wurde (Fehler), in diesem Fall MÜSSEN die Elemente errorCode und errorText gefüllt werden 
	</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="result" type="base:Result"/>
			<xs:element name="errorCode" type="base:ErrorCode" minOccurs="0"/>
			<xs:element name="errorText" type="base:ErrorText" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<xs:simpleType name="Result">
		<xs:annotation>
			<xs:documentation>Dieses Element enthält den Ergebnisstatus des Serviceaufrufes: "true", wenn der Service erfolgreich beendet wurde, andernfalls "false" </xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:boolean"/>
	</xs:simpleType>
	<xs:simpleType name="ErrorCode">
		<xs:restriction base="xs:string"/>
	</xs:simpleType>
	<xs:simpleType name="ErrorText">
		<xs:annotation>
			<xs:documentation>Dieses Element enthält einen Fehlertext, falls der Service nicht erfolgreich beendet wurde.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:maxLength value="255"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Id">
		<xs:annotation>
			<xs:documentation>Abstrakter Typ für IDs.	</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string"/>
	</xs:simpleType>
</xs:schema>
