/*
    $Header:   F:/GRUPPEN/PROJEKTE/PVCS_FIF/archives/FIF/FIF/src/net/arcor/fif/messagecreator/MessageSender.java-arc   1.0   Apr 09 2003 09:34:38   goethalo  $

    $Log:   F:/GRUPPEN/PROJEKTE/PVCS_FIF/archives/FIF/FIF/src/net/arcor/fif/messagecreator/MessageSender.java-arc  $
 * 
 *    Rev 1.0   Apr 09 2003 09:34:38   goethalo
 * Initial revision.
*/
package net.arcor.fif.messagecreator;

import org.apache.log4j.Logger;

import net.arcor.fif.common.FIFException;
import net.arcor.fif.transport.TransportManager;

/**
 * This class contains methods for sending <code>Message</code> objects that
 * have been generated by the <code>MessageCreator</code> to the queue.
 * It is a thin wrapper around the functionality implemented in the
 * <code>net.arcor.fif.transport</code> package that provides additional
 * convenience methods for users of the <code>MessageCreator</code>.
 * <p>
 * <b>NOTE:</b> Before creating a <code>MessageSender</code> object the
 * <code>TransportManager</code> should be initialized.  This is done by
 * calling the <code>TransportManager.init<code> method and passing in the
 * name of the configuration file to read the transport settings from.
 * @author goethalo
 */
public class MessageSender {

    /*------------------*
     * MEMBER VARIABLES *
     *------------------*/

    /**
     * The log4j logger.
     */
    private static Logger logger = Logger.getLogger(MessageSender.class);

    /**
     * The JMS Message Sender to use for sending messages.
     */
    private net.arcor.fif.transport.MessageSender sender = null;

    /*--------------*
     * CONSTRUCTORS *
     *--------------*/

    /**
     * Constructor.
     * @param queueAlias  The alias name of the queue to construct this object
     *                     for.
     *                     The alias names are defined in the property file.
     * @throws FIFException if the object could not be created.
     */
    public MessageSender(String queueAlias) throws FIFException {
        // Make sure that the transport manager is initialized
        if (!TransportManager.isInitialized()) {
            throw new FIFException("Cannot create MessageSender because the "
                + "TransportManager is not initialized.");
        }

        // Get a new sender from the transport manager
        sender = TransportManager.createSender(queueAlias);

        logger.debug("Successfully constructed MessageSender for alias " + queueAlias);
    }

    /*---------*
     * METHODS *
     *---------*/

    /**
     * Starts the <code>MessageSender</code>.
     * This method should be called before any message is sent to the queue.
     * @throws FIFException if the <code>MessageSender</code> could not be
     * started.
     */
    public void start() throws FIFException {
        // Start the sender
        logger.debug("Starting the MessageSender...");
        sender.start();
        logger.debug("Successfully started the MessageSender.");
    }

    /**
     * Sends a <code>Message</code> generated by the <code>MessageCreator</code>
     * to the queue.
     * @param msg  the message to be sent.
     * @throws FIFException if the message could not be sent.
     */
    public void sendMessage(Message msg) throws FIFException {
        // Precondition checks
        if (msg == null) {
            throw new FIFException("Cannot send message because the passed "
                + "in msg is null.");
        }
        // Send the message
        if (logger.isDebugEnabled()) {
            logger.debug("Sending Message: " + msg.getMessage());
        }
        sender.sendMessage(msg.getMessage());
        logger.debug("Successfully sent Message.");
    }

    /**
     * Shuts down the <code>MessageSender</code>.
     * This method should be called when no more message have to be sent to
     * the queue.  Typically this method is called before shutting down the
     * application.
     * @throws FIFException if the <code>MessageSender</code> could not be
     * shut down.
     */
    public void shutdown() throws FIFException {
        logger.debug("Shutting down the MessageSender...");
        sender.shutdown();
        logger.debug("Successfully shut down the MessageSender.");
    }
}
